#include<bits/stdc++.h>
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target)
    {
        vector<pair<int,int>>t;
        for(int i=0;i<nums.size();i++)
        {
            t.push_back(make_pair(nums[i],i));
        }
        int n=nums.size();
        sort(t.begin(),t.end());
        vector<int>ans;
        int i,j;
        i=0;
        j=n-1;
        while(i<j)
        {
            int ps=t[i].first+t[j].first;
            if(ps>target)
            {
                j--;
            }
            else if(ps<target)
            {
                i++;
            }
            else
            {
                ans.push_back(t[i].second);
                ans.push_back(t[j].second);
                return ans;
            }
        }
        return ans;

    }
};
java 
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> numMap = new HashMap<>();
        int n = nums.length;

        for (int i = 0; i < n; i++) {
            int complement = target - nums[i];
            if (numMap.containsKey(complement)) {
                return new int[]{numMap.get(complement), i};
            }
            numMap.put(nums[i], i);
        }

        return new int[]{}; 
    }
}
